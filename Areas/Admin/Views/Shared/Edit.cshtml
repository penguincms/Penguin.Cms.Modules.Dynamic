@model IMetaObject
@{

    Stack<IMetaObject> RecursionCheck = new Stack<IMetaObject>();

    Layout = null;

    Func<IMetaObject, IHtmlContent> RenderMeta = null;

    RenderMeta = this.Helper((IMetaObject toRender) =>
    @<text>
        @{
        if (!RecursionCheck.Contains(toRender))
        {
            RecursionCheck.Push(toRender);
        }
        else
        {
            return;
        }

        bool isEditable = !(toRender.Property?.AttributeStruct(typeof(DontAllowAttribute), nameof(DontAllowAttribute.Context), DisplayContexts.None).HasFlag(DisplayContexts.Edit) ?? false);
        bool isVisible = !(toRender.Property?.AttributeStruct(typeof(DontAllowAttribute), nameof(DontAllowAttribute.Context), DisplayContexts.None).HasFlag(DisplayContexts.View) ?? false);
        if (!isVisible)
        {
            RecursionCheck.Pop();
            return;
        };

        bool isRoot = toRender.IsRoot();
        bool isKey = ContextHelper.IsKey(toRender);
        bool jsonIgnore = toRender.Property?.HasAttribute<JsonIgnoreAttribute>() ?? false;
        //Technically the top level properties of the batch model arent batch since they represent the edit model data and not the template data
        bool isBatch = toRender.GetRoot().Is(typeof(BatchEditModelPageModel)) && !toRender.IsRoot() && !toRender.GetParent().Is(typeof(BatchEditModelPageModel));

        Dictionary<string, object> Attributes = new Dictionary<string, object>()
        {
            ["propertyname"] = toRender.Property?.Name,
            ["isroot"] = isRoot,
            ["coretype"] = toRender.GetCoreType(),
            ["recursive"] = toRender.IsRecursive(),
            ["propertytype"] = (toRender.Type ?? toRender.Property.Type).FullName,
            ["disabled"] = !isEditable || isBatch,
            ["hidden"] = !isEditable || isKey,
            ["ignored"] = jsonIgnore || (!isEditable && !isKey) || isBatch,
            ["isbatch"] = isBatch,
            ["groupname"] = toRender.Property?.AttributeRef<DisplayAttribute, string>(nameof(DisplayAttribute.GroupName), "")

        };

        if (toRender.GetCoreType() == CoreType.Collection)
        {
            Attributes.Add("collectiontype", toRender.Type.CollectionType.FullName);
        }
        string DisplayName = toRender?.Property?.AttributeRef<DisplayAttribute, string>(nameof(DisplayAttribute.Name));

        }
        <property @
                  Html.Raw(DynamicEditorService.JoinAttributes(Attributes))>
            <name>
                @if (isBatch && isEditable)
                {
                    <input type="checkbox" class="toggleProperty" data-ignored="True" />
                }
                @if (!string.IsNullOrWhiteSpace(toRender.Property?.Name))
                {
                    <span class="propertyName">
                        @(!string.IsNullOrWhiteSpace(DisplayName) ? DisplayName : toRender.Property?.Name)
                    </span>
                }
            </name>
            <value>
                @if (toRender.IsRecursive())
                {
                    RecursionCheck.Pop();
                    return;
                }
                @if (isKey)
                {
                    if (!isRoot && toRender.GetParent().IsRoot())
                    {
                        <input type="hidden" name="@toRender.Property.Name" value="@toRender.Value" />
                    }
                    else
                    {
                        <input type="hidden" value="@toRender.Value" />
                    }

                }
                else
                {
                    for (int i = 0; i < 1; i++)
                    {

                        EditorHandlerResult handler = DynamicEditorService.FindHandler(toRender, DisplayContexts.Edit);

                        if (!isEditable || handler is StaticValueResult)
                        {
                            <value>@toRender.Value</value>
                            break;
                        }

                        if (handler is DynamicEditorResult)
                        {
                            if (toRender.GetCoreType() == CoreType.Collection)
                            {
                                foreach (IMetaObject thisChild in toRender.CollectionItems)
                                {
                                    thisChild.SetParent(toRender);
                                    @RenderMeta(thisChild)
                                }
                            }
                            else if (toRender.GetCoreType() == CoreType.Reference)
                            {
                                foreach (IMetaObject thisChild in toRender.Properties.OrderBy(p => p.Property.AttributeStruct(typeof(DisplayAttribute), nameof(DisplayAttribute.Order), 0)))
                                {
                                    thisChild.SetParent(toRender);
                                    @RenderMeta(thisChild)
                                }
                            }
                        }
                        else if (handler is DynamicViewResult viewResult)
                        {
                            <partial name="@viewResult.ViewPath" model="@toRender" />
                        }
                        else if (handler is DynamicActionResult action)
                        {
                            @Html.MetaRoute(action.RouteData, toRender)
                        }
                    }

                }
            </value>
        </property>
        @{
        RecursionCheck.Pop();
        }
    </text>
    );

}

@RenderMeta(Model)